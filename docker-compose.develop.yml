services:
  migrate:
    build: .
    command: ["migrate"]
    environment:
      ENVIRONMENT: dev
      DEBUG: "True"
      TESTING: "true"
    env_file:
      - develop.env
    volumes:
      - ./gefapi:/opt/gef-api/gefapi
      - ./migrations:/opt/gef-api/migrations
    networks:
      - backend
      - db
    depends_on:
      - postgres
      - redis

  api:
    build: .
    command: ["develop"]
    environment:
      PORT: 3000
      ENVIRONMENT: dev
      DEBUG: "True"
      TESTING: "true"
    ports:
      - target: 3000
        published: 3000
    env_file:
      - develop.env
    volumes:
      - ./gefapi:/opt/gef-api/gefapi
      - ./migrations:/opt/gef-api/migrations
    networks:
      - backend
      - db
      - execution
    depends_on:
      - migrate
      - postgres
      - redis

  test:
    build: .
    command: ["test"]
    environment:
      ENVIRONMENT: test
      DEBUG: "True"
      TESTING: "true"
    env_file:
      - test.env
    volumes:
      - ./gefapi:/opt/gef-api/gefapi
      - ./migrations:/opt/gef-api/migrations
      - ./tests:/opt/gef-api/tests
    networks:
      - backend
      - db
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  worker:
    image: trendsearth_api
    build: .
    command: ["worker"]
    environment:
      ENVIRONMENT: dev
      DEBUG: "True"
      TESTING: "true"
      CELERY_WORKER_QUEUES: default
    env_file:
      - develop.env
    volumes:
      - ./gefapi:/opt/gef-api/gefapi
      - ./migrations:/opt/gef-api/migrations
    networks:
      - backend
      - db
    depends_on:
      - migrate
      - postgres
      - redis

  docker:
    image: trendsearth_api
    build: .
    command: ["worker"]
    user: root
    environment:
      ENVIRONMENT: dev
      DEBUG: "True"
      TESTING: "true"
      CELERY_WORKER_QUEUES: build
    env_file:
      - develop.env
    volumes:
      - ./gefapi:/opt/gef-api/gefapi
      - ./migrations:/opt/gef-api/migrations
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend
      - db
    depends_on:
      - migrate
      - postgres
      - redis

  beat:
    image: trendsearth_api
    build: .
    command: ["beat"]
    environment:
      ENVIRONMENT: dev
      DEBUG: "True"
      TESTING: "true"
    env_file:
      - develop.env
    volumes:
      - ./gefapi:/opt/gef-api/gefapi
      - ./migrations:/opt/gef-api/migrations
    networks:
      - backend
      - db
    depends_on:
      - migrate
      - postgres
      - redis

  redis:
    image: redis
    container_name: trendsearth-api-redis
    ports:
      - target: 6379
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]
      resources:
        reservations:
          cpus: "0.25"
          memory: 100M

  postgres:
    image: postgis/postgis:16-3.4
    container_name: trendsearth-api-postgres
    environment:
      POSTGRES_DB: trendsearth_develop_db
      POSTGRES_USER: trendsearth_develop
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./config/db/init-postgis.sh:/docker-entrypoint-initdb.d/init-postgis.sh
    ports:
      - target: 5432
    env_file:
      - develop.env
    networks:
      - db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trendsearth_develop -d trendsearth_develop_db"]
      interval: 5s
      timeout: 3s
      retries: 5

  registry:
    image: registry:2.8.1
    container_name: trendsearth-api-registry
    volumes:
      - registry-data:/var/lib/registry
    env_file:
      - develop.env
    ports:
      - target: 5000
        published: 5000
    networks:
      - backend

volumes:
  postgres-data:
  registry-data:

networks:
  db:
  backend:
  execution:
