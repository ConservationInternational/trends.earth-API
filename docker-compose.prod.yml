services:
  migrate:
    image: ${DOCKER_REGISTRY:-registry.example.com:5000}/trendsearth-api
    command: migrate
    environment:
      PORT: 3000
    env_file:
      - prod.env
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure

  manager:
    image: ${DOCKER_REGISTRY:-registry.example.com:5000}/trendsearth-api
    command: ["sh", "-c", "echo 'Manager container started' && echo 'Testing worker command...' && timeout 10s celery -A gefapi.celery worker -E --loglevel=DEBUG || echo 'Worker command test completed' && echo 'Now testing start command...' && exec gunicorn -c gunicorn.py gefapi.wsgi:application"]
    environment:
      PORT: 3000
      PYTHONUNBUFFERED: "1"
    # Remove port mapping temporarily to test
    # ports:
    #   - target: 3000
    #     published: 3001
    #     protocol: tcp
    #     mode: ingress
    env_file:
      - prod.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]
      resources:
        reservations:
          cpus: "0.5"
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

  worker:
    image: ${DOCKER_REGISTRY:-registry.example.com:5000}/trendsearth-api
    command: worker
    environment:
      PORT: 3000
    env_file:
      - prod.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]
      resources:
        reservations:
          cpus: "0.25"
          memory: 400M
      # Rolling update configuration
      update_config:
        parallelism: 1          # Update one replica at a time
        delay: 10s              # Wait 10s between updates
        failure_action: rollback # Auto-rollback on failure
        monitor: 60s            # Monitor new containers for 60s
        max_failure_ratio: 0.3  # Allow 30% failure rate before rollback
      rollback_config:
        parallelism: 1
        delay: 0s
        failure_action: pause
        monitor: 60s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

  beat:
    image: ${DOCKER_REGISTRY:-registry.example.com:5000}/trendsearth-api
    command: beat
    environment:
      PORT: 3000
    env_file:
      - prod.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]
      resources:
        reservations:
          cpus: "0.25"
          memory: 400M
      # Rolling update configuration
      update_config:
        parallelism: 1          # Update one replica at a time
        delay: 10s              # Wait 10s between updates
        failure_action: rollback # Auto-rollback on failure
        monitor: 60s            # Monitor new containers for 60s
        max_failure_ratio: 0.3  # Allow 30% failure rate before rollback
      rollback_config:
        parallelism: 1
        delay: 0s
        failure_action: pause
        monitor: 60s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

  redis:
    image: redis:7-alpine
    volumes:
      # Persistent Redis data storage - retains data across deployments
      - redis_prod_data:/data
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]
      resources:
        reservations:
          cpus: "0.25"
          memory: 100M
      # Rolling update configuration for Redis
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
      rollback_config:
        parallelism: 1
        delay: 0s
        failure_action: pause
        monitor: 60s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    # Append-only file persistence for Redis data durability
    command: redis-server --appendonly yes --appendfsync everysec

volumes:
  # Persistent Redis data volume - maintains session data, cache, and Celery task state across deployments
  redis_prod_data:
    driver: local

networks:
  backend:
    driver: overlay
    ipam:
      config:
        - subnet: ${DOCKER_SUBNET:-10.10.0.0/16}
