name: Deploy to Staging

on:
  push:
    branches: [staging, develop]
  pull_request:
    branches: [staging]
    types: [closed]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  IMAGE_NAME: trendsearth-api-staging
  COMPOSE_FILE: docker-compose.staging.yml

jobs:
  build-and-deploy:
    name: Build and Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

    - name: Get runner IP and update security group
      id: security-group
      run: |
        # Get the public IP of the GitHub Actions runner
        RUNNER_IP=$(curl -s https://checkip.amazonaws.com)
        echo "Runner IP: $RUNNER_IP"
        echo "runner-ip=$RUNNER_IP" >> $GITHUB_OUTPUT
        
        # Add SSH access rule for the runner IP
        echo "Adding SSH access for runner IP $RUNNER_IP to security group ${{ secrets.STAGING_SECURITY_GROUP_ID }}"
        aws ec2 authorize-security-group-ingress \
          --group-id "${{ secrets.STAGING_SECURITY_GROUP_ID }}" \
          --protocol tcp \
          --port 22 \
          --cidr "${RUNNER_IP}/32" || true
        
        echo "Security group rule added successfully"

    - name: Set SSH port variable
      id: ssh-port
      run: |
        # Trim whitespace and newlines from the port
        PORT="${{ secrets.STAGING_SSH_PORT || 22 }}"
        PORT=$(echo "$PORT" | tr -d '[:space:]')
        echo "port=$PORT" >> $GITHUB_OUTPUT

    - name: Build and push image on staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ steps.ssh-port.outputs.port }}
        script: |
          set -e
          
          echo "ÔøΩ Building Docker image on staging server..."
          
          # Navigate to application directory
          cd ${{ secrets.STAGING_APP_PATH || '/opt/trends-earth-api-staging' }}
          
          # Pull latest changes
          git fetch origin
          
          # Determine which branch to deploy
          if [ "${{ github.ref_name }}" = "staging" ]; then
            git reset --hard origin/staging
          else
            git reset --hard origin/develop
          fi
          
          # Configure insecure registry on server if needed
          echo "üìã Configuring insecure registry on server..."
          sudo mkdir -p /etc/docker
          if [ ! -f /etc/docker/daemon.json ] || ! grep -q "insecure-registries" /etc/docker/daemon.json; then
            echo '{"insecure-registries":["${{ env.REGISTRY }}"]}' | sudo tee /etc/docker/daemon.json > /dev/null
            sudo systemctl restart docker
            sleep 10
          fi
          
          # Configure Docker client authentication
          mkdir -p $HOME/.docker
          REGISTRY_ESCAPED=$(echo "${{ env.REGISTRY }}" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g')
          AUTH_ESCAPED=$(echo "${{ secrets.DOCKER_HTTP_SECRET }}" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g')
          cat > $HOME/.docker/config.json << 'EOF'
          {
            "auths": {
              "REGISTRY_PLACEHOLDER": {
                "auth": "AUTH_PLACEHOLDER"
              }
            },
            "insecure-registries": ["REGISTRY_PLACEHOLDER"]
          }
          EOF
          # Replace placeholders with actual values
          sed -i "s|REGISTRY_PLACEHOLDER|${REGISTRY_ESCAPED}|g" $HOME/.docker/config.json
          sed -i "s|AUTH_PLACEHOLDER|${AUTH_ESCAPED}|g" $HOME/.docker/config.json
          
          # Build the image with the appropriate tags
          echo "üî® Building Docker image..."
          
          # Create staging-specific tags
          REGISTRY="${{ env.REGISTRY }}"
          IMAGE_NAME="${{ env.IMAGE_NAME }}"
          BRANCH_NAME="${{ github.ref_name }}"
          SHORT_SHA="${{ github.sha }}"
          SHORT_SHA="${SHORT_SHA:0:7}"
          
          BUILT_TAGS="$REGISTRY/$IMAGE_NAME:$BRANCH_NAME
          $REGISTRY/$IMAGE_NAME:$BRANCH_NAME-$SHORT_SHA
          $REGISTRY/$IMAGE_NAME:staging"
          
          # Build with the first tag (primary tag)
          PRIMARY_TAG="$REGISTRY/$IMAGE_NAME:$BRANCH_NAME"
          echo "Building with primary tag: $PRIMARY_TAG"
          docker build -t "$PRIMARY_TAG" .
          
          # Tag with additional tags
          echo "$BUILT_TAGS" | while IFS= read -r tag; do
            if [ -n "$tag" ] && [ "$tag" != "$PRIMARY_TAG" ]; then
              echo "Tagging with: $tag"
              docker tag "$PRIMARY_TAG" "$tag"
            fi
          done
          
          # Push all tags to the local registry
          echo "üöÄ Pushing images to local registry..."
          echo "$BUILT_TAGS" | while IFS= read -r tag; do
            if [ -n "$tag" ]; then
              echo "Pushing: $tag"
              docker push "$tag"
            fi
          done
          
          echo "‚úÖ Image build and push completed!"

    - name: Setup Staging Database
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ steps.ssh-port.outputs.port }}
        script: |
          set -e
          
          # Navigate to application directory
          cd ${{ secrets.STAGING_APP_PATH || '/opt/trends-earth-api-staging' }}
          
          # Set staging database environment variables
          export STAGING_DB_HOST="${{ secrets.STAGING_DB_HOST }}"
          export STAGING_DB_PORT="${{ secrets.STAGING_DB_PORT }}"
          export STAGING_DB_NAME="${{ secrets.STAGING_DB_NAME }}"
          export STAGING_DB_USER="${{ secrets.STAGING_DB_USER }}"
          export STAGING_DB_PASSWORD="${{ secrets.STAGING_DB_PASSWORD }}"
          
          # Use defaults if not provided
          export STAGING_DB_HOST="${STAGING_DB_HOST:-localhost}"
          export STAGING_DB_PORT="${STAGING_DB_PORT:-5433}"
          export STAGING_DB_NAME="${STAGING_DB_NAME:-trendsearth_staging}"
          export STAGING_DB_USER="${STAGING_DB_USER:-trendsearth_staging}"
          
          # Set production database environment variables (for data import)
          export PROD_DB_HOST="${{ secrets.PROD_DB_HOST }}"
          export PROD_DB_PORT="${{ secrets.PROD_DB_PORT }}"
          export PROD_DB_NAME="${{ secrets.PROD_DB_NAME }}"
          export PROD_DB_USER="${{ secrets.PROD_DB_USER }}"
          export PROD_DB_PASSWORD="${{ secrets.PROD_DB_PASSWORD }}"
          
          # Use defaults if not provided
          export PROD_DB_PORT="${PROD_DB_PORT:-5432}"
          export PROD_DB_NAME="${PROD_DB_NAME:-trendsearth}"
          
          # Set test user credentials
          export TEST_SUPERADMIN_EMAIL="${{ secrets.TEST_SUPERADMIN_EMAIL }}"
          export TEST_ADMIN_EMAIL="${{ secrets.TEST_ADMIN_EMAIL }}"
          export TEST_USER_EMAIL="${{ secrets.TEST_USER_EMAIL }}"
          export TEST_SUPERADMIN_PASSWORD="${{ secrets.TEST_SUPERADMIN_PASSWORD }}"
          export TEST_ADMIN_PASSWORD="${{ secrets.TEST_ADMIN_PASSWORD }}"
          export TEST_USER_PASSWORD="${{ secrets.TEST_USER_PASSWORD }}"
          
          # Run comprehensive database setup script
          chmod +x scripts/deployment/staging-database-init.sh
          ./scripts/deployment/staging-database-init.sh

    - name: Deploy to EC2 Staging
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ steps.ssh-port.outputs.port }}
        script: |
          set -e
          
          echo "üöÄ Starting staging deployment..."
          
          # Navigate to application directory
          cd ${{ secrets.STAGING_APP_PATH || '/opt/trends-earth-api-staging' }}
          
          # Set Docker group ID for socket access
          export DOCKER_GROUP_ID=$(getent group docker | cut -d: -f3)
          
          # Deploy with Docker Swarm
          echo "üì¶ Deploying services..."
          docker stack deploy -c ${{ env.COMPOSE_FILE }} --with-registry-auth trends-earth-staging
          
          # Wait for services to be ready
          echo "‚è≥ Waiting for services to be ready..."
          sleep 30
          
          # Check service status
          echo "üìä Service status:"
          docker service ls | grep trends-earth-staging
          
          # Health check
          echo "üè• Performing health check..."
          max_attempts=30
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            if curl -f http://localhost:3002/api-health > /dev/null 2>&1; then
              echo "‚úÖ Health check passed"
              break
            else
              echo "‚è≥ Health check attempt $attempt/$max_attempts failed, retrying..."
              sleep 10
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "‚ùå Health check failed after $max_attempts attempts"
            exit 1
          fi
          
          echo "üéâ Staging deployment completed successfully!"

    - name: Run integration tests
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ steps.ssh-port.outputs.port }}
        script: |
          set -e
          
          # Navigate to application directory
          cd ${{ secrets.STAGING_APP_PATH || '/opt/trends-earth-api-staging' }}
          
          # Set test user credentials for integration tests
          export TEST_SUPERADMIN_EMAIL="${{ secrets.TEST_SUPERADMIN_EMAIL }}"
          export TEST_ADMIN_EMAIL="${{ secrets.TEST_ADMIN_EMAIL }}"
          export TEST_USER_EMAIL="${{ secrets.TEST_USER_EMAIL }}"
          export TEST_SUPERADMIN_PASSWORD="${{ secrets.TEST_SUPERADMIN_PASSWORD }}"
          export TEST_ADMIN_PASSWORD="${{ secrets.TEST_ADMIN_PASSWORD }}"
          export TEST_USER_PASSWORD="${{ secrets.TEST_USER_PASSWORD }}"
          
          # Run integration tests script
          chmod +x scripts/deployment/run-integration-tests.sh
          ./scripts/deployment/run-integration-tests.sh

    - name: Cleanup security group access
      if: always()
      run: |
        # Remove the SSH access rule for the runner IP
        RUNNER_IP="${{ steps.security-group.outputs.runner-ip }}"
        if [ -n "$RUNNER_IP" ]; then
          echo "Removing SSH access for runner IP $RUNNER_IP from security group ${{ secrets.STAGING_SECURITY_GROUP_ID }}"
          aws ec2 revoke-security-group-ingress \
            --group-id "${{ secrets.STAGING_SECURITY_GROUP_ID }}" \
            --protocol tcp \
            --port 22 \
            --cidr "${RUNNER_IP}/32" || true
          echo "Security group rule removed successfully"
        else
          echo "No runner IP found to remove from security group"
        fi
