name: Deploy to Production

on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  IMAGE_NAME: trendsearth-api
  COMPOSE_FILE: docker-compose.prod.yml

jobs:
  build-and-deploy:
    name: Build and Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to EC2 Production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: ${{ secrets.PROD_SSH_PORT || 22 }}
        script: |
          set -e
          
          echo "🚀 Starting production deployment..."
          
          # Navigate to application directory
          cd ${{ secrets.PROD_APP_PATH || '/opt/trends-earth-api' }}
          
          # Pull latest changes
          git fetch origin
          git reset --hard origin/master
          
          # Set Docker group ID for socket access
          export DOCKER_GROUP_ID=$(getent group docker | cut -d: -f3)
          
          # Pull latest images
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Deploy with Docker Swarm
          echo "📦 Deploying services..."
          docker stack deploy -c ${{ env.COMPOSE_FILE }} --with-registry-auth trends-earth-prod
          
          # Wait for services to be ready
          echo "⏳ Waiting for services to be ready..."
          sleep 30
          
          # Check service status
          echo "📊 Service status:"
          docker service ls | grep trends-earth-prod
          
          # Health check
          echo "🏥 Performing health check..."
          max_attempts=30
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            if curl -f http://localhost:3001/api-health > /dev/null 2>&1; then
              echo "✅ Health check passed"
              break
            else
              echo "⏳ Health check attempt $attempt/$max_attempts failed, retrying..."
              sleep 10
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "❌ Health check failed after $max_attempts attempts"
            echo "🔄 Initiating automatic rollback..."
            
            # Rollback all services
            docker service rollback trends-earth-prod_manager || echo "Manager rollback failed"
            docker service rollback trends-earth-prod_worker || echo "Worker rollback failed"  
            docker service rollback trends-earth-prod_beat || echo "Beat rollback failed"
            
            # Wait for rollback to complete
            sleep 60
            
            # Verify rollback health
            if curl -f http://localhost:3001/api-health > /dev/null 2>&1; then
              echo "✅ Rollback successful - services restored"
            else
              echo "❌ Rollback verification failed - manual intervention required"
            fi
            
            exit 1
          fi
          
          echo "🎉 Production deployment completed successfully!"
