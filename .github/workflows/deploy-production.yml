name: Deploy to Production

on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  IMAGE_NAME: trendsearth-api
  COMPOSE_FILE: docker-compose.prod.yml

jobs:
  build-and-deploy:
    name: Build and Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

    - name: Get runner IP and update security group
      id: security-group
      run: |
        # Get the public IP of the GitHub Actions runner
        RUNNER_IP=$(curl -s https://checkip.amazonaws.com)
        echo "Runner IP: $RUNNER_IP"
        echo "runner-ip=$RUNNER_IP" >> $GITHUB_OUTPUT
        
        # Add SSH access rule for the runner IP
        echo "Adding SSH access for runner IP $RUNNER_IP to security group ${{ secrets.PROD_SECURITY_GROUP_ID }}"
        aws ec2 authorize-security-group-ingress \
          --group-id "${{ secrets.PROD_SECURITY_GROUP_ID }}" \
          --protocol tcp \
          --port 22 \
          --cidr "${RUNNER_IP}/32" || true
        
        echo "Security group rule added successfully"

    - name: Set SSH port variable
      id: ssh-port
      run: |
        # Trim whitespace and newlines from the port
        PORT="${{ secrets.PROD_SSH_PORT || 22 }}"
        PORT=$(echo "$PORT" | tr -d '[:space:]')
        echo "port=$PORT" >> $GITHUB_OUTPUT

    - name: Build and push image on production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: ${{ steps.ssh-port.outputs.port }}
        script: |
          set -e
          
          echo "🚀 Building Docker image on production server..."
          
          # Navigate to application directory
          cd ${{ secrets.PROD_APP_PATH || '/opt/trends-earth-api' }}
          
          # Pull latest changes
          git fetch origin
          git reset --hard origin/master
          
          echo "✅ Currently on branch: $(git branch --show-current)"
          
          # Configure insecure registry on server if needed
          echo "📋 Configuring insecure registry on server..."
          sudo mkdir -p /etc/docker
          if [ ! -f /etc/docker/daemon.json ] || ! grep -q "insecure-registries" /etc/docker/daemon.json; then
            echo '{"insecure-registries":["${{ env.REGISTRY }}"]}' | sudo tee /etc/docker/daemon.json > /dev/null
            sudo systemctl restart docker
            sleep 10
          fi
          
          # Configure Docker client authentication
          mkdir -p $HOME/.docker
          REGISTRY_ESCAPED=$(echo "${{ env.REGISTRY }}" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g')
          AUTH_ESCAPED=$(echo "${{ secrets.DOCKER_HTTP_SECRET }}" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g')
          cat > $HOME/.docker/config.json << 'EOF'
          REGISTRY_ESCAPED=$(echo "${{ env.REGISTRY }}" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g')
          AUTH_ESCAPED=$(echo "${{ secrets.DOCKER_HTTP_SECRET }}" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g')
          cat > $HOME/.docker/config.json << 'EOF'
          {
            "auths": {
              "REGISTRY_PLACEHOLDER": {
                "auth": "AUTH_PLACEHOLDER"
              }
            },
            "insecure-registries": ["REGISTRY_PLACEHOLDER"]
          }
          EOF
          # Replace placeholders with actual values
          sed -i "s|REGISTRY_PLACEHOLDER|${REGISTRY_ESCAPED}|g" $HOME/.docker/config.json
          sed -i "s|AUTH_PLACEHOLDER|${AUTH_ESCAPED}|g" $HOME/.docker/config.json
          
          # Build the image with the appropriate tags
          echo "🔨 Building Docker image..."
          
          # Create production-specific tags
          REGISTRY="${{ env.REGISTRY }}"
          IMAGE_NAME="${{ env.IMAGE_NAME }}"
          BRANCH_NAME="${{ github.ref_name }}"
          SHORT_SHA="${{ github.sha }}"
          SHORT_SHA="${SHORT_SHA:0:7}"
          
          BUILT_TAGS="$REGISTRY/$IMAGE_NAME:$BRANCH_NAME
          $REGISTRY/$IMAGE_NAME:$BRANCH_NAME-$SHORT_SHA
          $REGISTRY/$IMAGE_NAME:latest"
          
          # Build with the first tag (primary tag)
          PRIMARY_TAG="$REGISTRY/$IMAGE_NAME:$BRANCH_NAME"
          echo "Building with primary tag: $PRIMARY_TAG"
          docker build -t "$PRIMARY_TAG" .
          
          # Tag with additional tags
          echo "$BUILT_TAGS" | while IFS= read -r tag; do
            if [ -n "$tag" ] && [ "$tag" != "$PRIMARY_TAG" ]; then
              echo "Tagging with: $tag"
              docker tag "$PRIMARY_TAG" "$tag"
            fi
          done
          
          # Push all tags to the local registry
          echo "🚀 Pushing images to local registry..."
          echo "$BUILT_TAGS" | while IFS= read -r tag; do
            if [ -n "$tag" ]; then
              echo "Pushing: $tag"
              docker push "$tag"
            fi
          done
          
          echo "✅ Image build and push completed!"

    - name: Deploy to EC2 Production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: ${{ steps.ssh-port.outputs.port }}
        script: |
          set -e
          
          echo "🚀 Starting production deployment..."
          
          # Navigate to application directory
          cd ${{ secrets.PROD_APP_PATH || '/opt/trends-earth-api' }}
          
          # Set Docker group ID for socket access
          export DOCKER_GROUP_ID=$(getent group docker | cut -d: -f3)
          export DOCKER_REGISTRY="${{ secrets.DOCKER_REGISTRY }}"
          
          # Deploy with Docker Swarm
          echo "📦 Deploying services..."
          
          # Force remove existing stack and wait for complete cleanup
          echo "🔄 Ensuring clean deployment environment..."
          docker stack rm trends-earth-prod || true
          
          # Wait for all services to be completely removed
          echo "⏳ Waiting for stack cleanup to complete..."
          timeout=60
          while [ $timeout -gt 0 ]; do
            if ! docker service ls --format "{{.Name}}" | grep -q "trends-earth-prod"; then
              echo "✅ Stack cleanup completed"
              break
            fi
            echo "⏳ Waiting for services to stop... ($timeout seconds remaining)"
            sleep 5
            timeout=$((timeout - 5))
          done
          
          # Additional cleanup - remove any lingering containers
          echo "🧹 Cleaning up any remaining containers..."
          docker ps -a --filter "name=trends-earth-prod" --format "{{.Names}}" | xargs -r docker rm -f || true
          
          # Remove any existing networks to ensure clean state
          echo "🌐 Cleaning up overlay networks..."
          if docker network ls --format "{{.Name}}" | grep -q "trends-earth-prod_backend"; then
            echo "Removing existing network trends-earth-prod_backend..."
            # Force remove network even if it has active endpoints
            docker network rm trends-earth-prod_backend --force || true
            echo "✅ Network cleanup completed"
            sleep 3
          fi
          
          # Ensure we're using the latest compose file
          echo "📋 Verifying compose file..."
          if [ ! -f "${{ env.COMPOSE_FILE }}" ]; then
            echo "❌ Compose file not found: ${{ env.COMPOSE_FILE }}"
            exit 1
          fi
          
          # Deploy fresh stack
          echo "🚀 Deploying fresh stack..."
          docker stack deploy -c ${{ env.COMPOSE_FILE }} --with-registry-auth trends-earth-prod
          
          # Wait for services to be ready
          echo "⏳ Waiting for services to be ready..."
          
          # Check that all services are running with desired replicas
          echo "📊 Waiting for all services to be running..."
          max_wait=120
          wait_time=0
          
          while [ $wait_time -lt $max_wait ]; do
            # Check if all services have desired replicas running
            pending_services=$(docker service ls --filter "name=trends-earth-prod" --format "table {{.Name}}\t{{.Replicas}}" | grep -v "1/1" | wc -l)
            
            # Migrate when running correctly will run once then exit, so we expect 1 service to not be replicated
            if [ $pending_services -eq 2 ]; then  # Only header line and migrate line should remain if all other services are 1/1
              echo "✅ All services are running"
              break
            fi
            
            echo "⏳ Waiting for services to be ready... ($wait_time/$max_wait seconds)"
            docker service ls --filter "name=trends-earth-prod"
            sleep 10
            wait_time=$((wait_time + 10))
          done
          
          if [ $wait_time -ge $max_wait ]; then
            echo "⚠️ Some services may not be fully ready after $max_wait seconds"
          fi
          
          # Check service status
          echo "📊 Final service status:"
          docker service ls | grep trends-earth-prod
          
          # Health check
          echo "🏥 Performing health check..."
          max_attempts=30
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "⏳ Health check attempt $attempt/$max_attempts..."
            
            # First check if port is listening
            if ! nc -z 127.0.0.1 3001 2>/dev/null; then
              echo "⚠️ Port 3001 is not listening yet"
            else
              echo "✅ Port 3001 is listening"
            fi
            
            # Perform health check request
            health_response=$(curl -f -s -w "HTTP_CODE:%{http_code}" http://127.0.0.1:3001/api-health 2>&1)
            curl_exit_code=$?
            
            if [ $curl_exit_code -eq 0 ]; then
              echo "✅ Health check passed"
              echo "Response: $health_response"
              break
            else
              echo "⏳ Health check failed with exit code $curl_exit_code"
              echo "Response: $health_response"
            fi
            
            sleep 10
            attempt=$((attempt + 1))
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "❌ Health check failed after $max_attempts attempts"
            echo "🔍 Final debugging information:"
            echo "  - All running containers:"
            docker ps --filter "name=trends-earth-prod"
            echo "  - Manager service details:"
            docker service inspect trends-earth-prod_manager --format="{{json .Spec.TaskTemplate.ContainerSpec}}" || echo "Service not found"
            echo "  - Recent manager service logs:"
            docker service logs --tail 50 trends-earth-prod_manager || echo "No logs available"
            
            echo "🔄 Initiating automatic rollback..."
            
            # Rollback all services
            docker service rollback trends-earth-prod_manager || echo "Manager rollback failed"
            docker service rollback trends-earth-prod_worker || echo "Worker rollback failed"  
            docker service rollback trends-earth-prod_beat || echo "Beat rollback failed"
            
            # Wait for rollback to complete
            sleep 60
            
            # Verify rollback health
            if curl -f http://localhost:3001/api-health > /dev/null 2>&1; then
              echo "✅ Rollback successful - services restored"
            else
              echo "❌ Rollback verification failed - manual intervention required"
            fi
            
            exit 1
          fi
          
          echo "🎉 Production deployment completed successfully!"

    - name: Run basic integration tests
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: ${{ steps.ssh-port.outputs.port }}
        script: |
          set -e
          
          # Navigate to application directory
          cd ${{ secrets.PROD_APP_PATH || '/opt/trends-earth-api' }}
          
          echo "🧪 Running basic integration tests for production..."
          
          # Test API health endpoint
          echo "⏳ Testing health endpoint..."
          if curl -f -s http://127.0.0.1:3001/api-health >/dev/null 2>&1; then
            echo "✅ Health endpoint working"
          else
            echo "❌ Health endpoint failed"
            exit 1
          fi
          
          # Test API documentation endpoint
          echo "⏳ Testing API documentation endpoint..."
          if curl -f -s http://127.0.0.1:3001/api/docs/ >/dev/null 2>&1; then
            echo "✅ API documentation endpoint working"
          else
            echo "❌ API documentation endpoint failed"
            exit 1
          fi
          
          # Test database connectivity through API
          echo "⏳ Testing basic API functionality..."
          api_response=$(curl -f -s -w "HTTP_CODE:%{http_code}" http://127.0.0.1:3001/api/v1/auth/check-logged 2>&1)
          if echo "$api_response" | grep -q "HTTP_CODE:200\|HTTP_CODE:401"; then
            echo "✅ API responding correctly"
          else
            echo "❌ API not responding correctly: $api_response"
            exit 1
          fi
          
          echo "✅ All basic integration tests passed"

    - name: Notify Rollbar of deployment
      if: success()
      run: |
        echo "🔔 Notifying Rollbar of successful deployment..."
        
        # Get deployment information
        ENVIRONMENT="production"
        REVISION="${{ github.sha }}"
        LOCAL_USERNAME="${{ github.actor }}"
        COMMENT="Deployed to production via GitHub Actions - Branch: ${{ github.ref_name }}, Commit: ${REVISION:0:7}"
        
        # Send deployment notification to Rollbar
        curl -X POST 'https://api.rollbar.com/api/1/deploy/' \
          -H 'Content-Type: application/json' \
          -d '{
            "access_token": "${{ secrets.ROLLBAR_SERVER_ACCESS_TOKEN }}",
            "environment": "'"$ENVIRONMENT"'",
            "revision": "'"$REVISION"'",
            "local_username": "'"$LOCAL_USERNAME"'",
            "comment": "'"$COMMENT"'"
          }'
        
        echo "✅ Rollbar deployment notification sent successfully"

    - name: Cleanup security group access
      if: always()
      run: |
        # Remove the SSH access rule for the runner IP
        RUNNER_IP="${{ steps.security-group.outputs.runner-ip }}"
        if [ -n "$RUNNER_IP" ]; then
          echo "Removing SSH access for runner IP $RUNNER_IP from security group ${{ secrets.PROD_SECURITY_GROUP_ID }}"
          aws ec2 revoke-security-group-ingress \
            --group-id "${{ secrets.PROD_SECURITY_GROUP_ID }}" \
            --protocol tcp \
            --port 22 \
            --cidr "${RUNNER_IP}/32" || true
          echo "Security group rule removed successfully"
        else
          echo "No runner IP found to remove from security group"
        fi
