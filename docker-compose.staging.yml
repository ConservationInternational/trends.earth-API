services:
  migrate:
    image: ${DOCKER_REGISTRY:-registry.example.com:5000}/trendsearth-api-staging
    command: migrate
    environment:
      PORT: 3000
    env_file:
      - staging.env
    networks:
      - backend
    depends_on:
      - postgres
    deploy:
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 60s

  manager:
    image: ${DOCKER_REGISTRY:-registry.example.com:5000}/trendsearth-api-staging
    command: start
    environment:
      PORT: 3000
    ports:
      - target: 3000
        published: 3002
    env_file:
      - staging.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]
      resources:
        reservations:
          cpus: "0.25"
          memory: 400M

  worker:
    image: ${DOCKER_REGISTRY:-registry.example.com:5000}/trendsearth-api-staging
    command: worker
    environment:
      PORT: 3000
    env_file:
      - staging.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]
      resources:
        reservations:
          cpus: "0.25"
          memory: 400M

  beat:
    image: ${DOCKER_REGISTRY:-registry.example.com:5000}/trendsearth-api-staging
    command: beat
    environment:
      PORT: 3000
    env_file:
      - staging.env
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]
      resources:
        reservations:
          cpus: "0.25"
          memory: 400M

  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: ${STAGING_DB_NAME:-trendsearth_staging}
      POSTGRES_USER: ${STAGING_DB_USER:-trendsearth_staging}
      POSTGRES_PASSWORD: ${STAGING_DB_PASSWORD:-postgres}
    ports:
      - target: 5432
        published: 5433
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
    networks:
      - backend
    deploy:
      resources:
        reservations:
          cpus: "0.25"
          memory: 200M

  redis:
    image: redis:7-alpine
    ports:
      - target: 6379
    volumes:
      # Persistent Redis data storage - retains data across deployments
      - redis_staging_data:/data
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]
      resources:
        reservations:
          cpus: "0.25"
          memory: 400M
      # Rolling update configuration for Redis
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
      rollback_config:
        parallelism: 1
        delay: 0s
        failure_action: pause
        monitor: 60s
    # Append-only file persistence for Redis data durability
    command: redis-server --appendonly yes --appendfsync everysec

volumes:
  postgres_staging_data:
  # Persistent Redis data volume - maintains session data, cache, and Celery task state across deployments
  redis_staging_data:
    driver: local

networks:
  backend:
    driver: overlay
    attachable: true
    ipam:
      config:
        - subnet: ${DOCKER_SUBNET:-10.1.0.0/16}
