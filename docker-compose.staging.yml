services:
  migrate:
    image: 172.40.1.52:5000/trendsearth-api-staging
    build: .
    command: migrate
    environment:
      PORT: 3000
    env_file:
      - staging.env
    group_add:
      - ${DOCKER_GROUP_ID:-999}
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure

  manager:
    image: 172.40.1.52:5000/trendsearth-api-staging
    command: start
    environment:
      PORT: 3000
    ports:
      - target: 3000
        published: 3002
    env_file:
      - staging.env
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
    group_add:
      - ${DOCKER_GROUP_ID:-999}
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]
      resources:
        reservations:
          cpus: "0.25"
          memory: 400M

  worker:
    image: 172.40.1.52:5000/trendsearth-api-staging
    command: worker
    environment:
      PORT: 3000
    env_file:
      - prod2.env
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
    group_add:
      - ${DOCKER_GROUP_ID:-999}
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]
      resources:
        reservations:
          cpus: "0.25"
          memory: 400M

  beat:
    image: 172.40.1.52:5000/trendsearth-api-staging
    command: beat
    environment:
      PORT: 3000
    env_file:
      - staging.env
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
    group_add:
      - ${DOCKER_GROUP_ID:-999}
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]
      resources:
        reservations:
          cpus: "0.25"
          memory: 400M

  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: ${STAGING_DB_NAME:-trendsearth_staging}
      POSTGRES_USER: ${STAGING_DB_USER:-trendsearth_staging}
      POSTGRES_PASSWORD: ${STAGING_DB_PASSWORD}
    ports:
      - target: 5432
        published: 5433
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]
      resources:
        reservations:
          cpus: "0.25"
          memory: 200M

  redis:
    image: redis
    ports:
      - target: 6379
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]
      resources:
        reservations:
          cpus: "0.25"
          memory: 400M

volumes:
  postgres_staging_data:

networks:
  backend:
    driver: overlay
    ipam:
      config:
        - subnet: 10.1.0.0/16
