services:
  migrate:
    image: ${DOCKER_REGISTRY:-registry.example.com:5000}/trendsearth-api:staging
    command: migrate
    environment:
      PORT: 3000
      ENVIRONMENT: staging
      GIT_BRANCH: ${GIT_BRANCH:-unknown}
      DEPLOYMENT_ENVIRONMENT: ${DEPLOYMENT_ENVIRONMENT:-staging}
    env_file:
      - staging.env
    networks:
      - backend
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 60s
      # Ensure only one migrate service runs at a time to prevent migration conflicts
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        monitor: 60s
        order: stop-first
      rollback_config:
        parallelism: 1
        delay: 0s
        failure_action: pause
        monitor: 60s

  api:
    image: ${DOCKER_REGISTRY:-registry.example.com:5000}/trendsearth-api:staging
    command: start
    environment:
      PORT: 3000
      ENVIRONMENT: staging
      GIT_COMMIT_SHA: ${GIT_COMMIT_SHA:-unknown}
      GIT_BRANCH: ${GIT_BRANCH:-unknown}
      DEPLOYMENT_ENVIRONMENT: ${DEPLOYMENT_ENVIRONMENT:-staging}
    ports:
      - target: 3000
        published: 3002
        protocol: tcp
        mode: ingress
    env_file:
      - staging.env
    networks:
      - backend
      - execution
    deploy:
      replicas: 1
      resources:
        reservations:
          cpus: "0.1"
          memory: 100M
      # Rolling update configuration to prevent race conditions
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 0s
        failure_action: pause
        monitor: 60s
        order: stop-first
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

  worker:
    image: ${DOCKER_REGISTRY:-registry.example.com:5000}/trendsearth-api:staging
    command: worker
    environment:
      PORT: 3000
      ENVIRONMENT: staging
      # Only handle execution tasks, not build tasks
      CELERY_WORKER_QUEUES: default
      GIT_BRANCH: ${GIT_BRANCH:-unknown}
      DEPLOYMENT_ENVIRONMENT: ${DEPLOYMENT_ENVIRONMENT:-staging}
    env_file:
      - staging.env
    networks:
      - backend
    deploy:
      replicas: 1
      resources:
        reservations:
          cpus: "0.1"
          memory: 100M
      # Rolling update configuration to prevent race conditions
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
      rollback_config:
        parallelism: 1
        delay: 0s
        failure_action: pause
        monitor: 60s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

  beat:
    image: ${DOCKER_REGISTRY:-registry.example.com:5000}/trendsearth-api:staging
    command: beat
    environment:
      PORT: 3000
      ENVIRONMENT: staging
      GIT_BRANCH: ${GIT_BRANCH:-unknown}
      DEPLOYMENT_ENVIRONMENT: ${DEPLOYMENT_ENVIRONMENT:-staging}
    env_file:
      - staging.env
    networks:
      - backend
    deploy:
      replicas: 1
      resources:
        reservations:
          cpus: "0.1"
          memory: 100M
      # Rolling update configuration to prevent race conditions
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
      rollback_config:
        parallelism: 1
        delay: 0s
        failure_action: pause
        monitor: 60s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

  docker:
    image: ${DOCKER_REGISTRY:-registry.example.com:5000}/trendsearth-api:staging
    command: worker
    user: root
    environment:
      PORT: 3000
      ENVIRONMENT: staging
      # Only handle build tasks that require Docker socket access
      CELERY_WORKER_QUEUES: build
      GIT_BRANCH: ${GIT_BRANCH:-unknown}
      DEPLOYMENT_ENVIRONMENT: ${DEPLOYMENT_ENVIRONMENT:-staging}
    env_file:
      - staging.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]
      replicas: 1
      resources:
        reservations:
          cpus: "0.5"
          memory: 800M
        limits:
          cpus: "1.0"
          memory: 1G
      # Rolling update configuration for builder
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.5
      rollback_config:
        parallelism: 1
        delay: 0s
        failure_action: pause
        monitor: 60s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: ${STAGING_DB_NAME:-trendsearth_staging}
      POSTGRES_USER: ${STAGING_DB_USER:-trendsearth_staging}
      POSTGRES_PASSWORD: ${STAGING_DB_PASSWORD:-postgres}
    ports:
      - target: 5432
        published: 5433
        protocol: tcp
        mode: ingress
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
    networks:
      - backend
    deploy:
      placement:
        constraints:
          - node.role == manager
      resources:
        reservations:
          cpus: "0.1"
          memory: 200M
      # Rolling update configuration for database
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
      rollback_config:
        parallelism: 1
        delay: 0s
        failure_action: pause
        monitor: 60s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

  redis:
    image: redis:7-alpine
    ports:
      - target: 6379
    volumes:
      # Persistent Redis data storage - retains data across deployments
      - redis_staging_data:/data
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]
      resources:
        reservations:
          cpus: "0.1"
          memory: 100M
      # Rolling update configuration for Redis
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
      rollback_config:
        parallelism: 1
        delay: 0s
        failure_action: pause
        monitor: 60s
    # Append-only file persistence for Redis data durability
    command: redis-server --appendonly yes --appendfsync everysec

volumes:
  postgres_staging_data:
  # Persistent Redis data volume - maintains session data, cache, and Celery task state across deployments
  redis_staging_data:
    driver: local

networks:
  backend:
    driver: overlay
    attachable: true
    ipam:
      driver: default
      config:
        - subnet: ${DOCKER_SUBNET:-10.1.0.0/16}
  execution:
    driver: overlay
    attachable: true
    ipam:
      driver: default
      config:
        - subnet: ${EXECUTION_SUBNET:-10.1.1.0/24}
