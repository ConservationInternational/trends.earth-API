# =============================================================================
# Trends.Earth API Environment Configuration
# =============================================================================
# Copy this file to the appropriate environment file (develop.env, test.env, 
# staging.env, prod.env) and configure the values according to your setup.
#
# Variables marked as REQUIRED must be set for the application to function.
# Variables marked as OPTIONAL have defaults or are not essential for basic operation.
# =============================================================================

# =============================================================================
# APPLICATION CORE CONFIGURATION
# =============================================================================

# REQUIRED: Application environment (dev, test, staging, prod)
ENVIRONMENT=dev

# REQUIRED: Secret keys for JWT and general application security
# Generate strong random values for production: openssl rand -base64 32
JWT_SECRET_KEY=your_jwt_secret_key_here
SECRET_KEY=your_secret_key_here

# OPTIONAL: Application debugging and testing flags
DEBUG=False
TESTING=False
PORT=3000

# OPTIONAL: Logging level (DEBUG, INFO, WARNING, ERROR)
LOG_LEVEL=INFO

# OPTIONAL: Cross-Origin Resource Sharing allowed origins (comma-separated)
CORS_ORIGINS=http://localhost:3000,http://localhost:8080

# REQUIRED: API configuration for trends.earth-Environment integration
API_USER=your_api_user
API_PASSWORD=your_api_password
API_URL=your_api_url

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# REQUIRED: Primary database connection
# Format: postgresql://username:password@host:port/database
DATABASE_URL=postgresql://user:password@host:5432/database

# OPTIONAL: Individual database components (used as fallback if DATABASE_URL not set)
DATABASE_ENV_POSTGRES_USER=postgres
DATABASE_ENV_POSTGRES_PASSWORD=postgres
DATABASE_ENV_POSTGRES_DB=postgres
DATABASE_PORT_5432_TCP_ADDR=localhost
DATABASE_PORT_5432_TCP_PORT=5432

# OPTIONAL: Staging database configuration (for staging deployments)
# These variables are used when deploying to staging environment with docker-compose.staging.yml
STAGING_DB_HOST=localhost
STAGING_DB_PORT=5433
STAGING_DB_NAME=trendsearth_staging
STAGING_DB_USER=trendsearth_staging
STAGING_DB_PASSWORD=change_this_staging_password_in_production

# =============================================================================
# REDIS CONFIGURATION (Required for Celery background tasks)
# =============================================================================

# REQUIRED: Redis connection for Celery broker and result backend
REDIS_URL=redis://redis:6379/0

# OPTIONAL: Individual Redis components (used as fallback if REDIS_URL not set)
REDIS_PORT_6379_TCP_ADDR=localhost
REDIS_PORT_6379_TCP_PORT=6379

# =============================================================================
# DOCKER CONFIGURATION (Required for script execution)
# =============================================================================

# REQUIRED: Docker socket path for container management
DOCKER_HOST=unix:///var/run/docker.sock

# REQUIRED: Docker group ID for non-root container security
# Get value with: id -g docker
DOCKER_GROUP_ID=999

# OPTIONAL: Docker registry configuration
REGISTRY_URL=localhost:5000

# OPTIONAL: Docker network subnet
DOCKER_SUBNET=10.10.0.0/16

# =============================================================================
# AWS S3 CONFIGURATION (Required for file storage)
# =============================================================================

# REQUIRED: AWS credentials for S3 access
AWS_ACCESS_KEY_ID=your_aws_access_key_id
AWS_SECRET_ACCESS_KEY=your_aws_secret_access_key
AWS_DEFAULT_REGION=us-east-1

# REQUIRED: S3 bucket configuration for scripts
SCRIPTS_S3_BUCKET=your-scripts-bucket
SCRIPTS_S3_PREFIX=scripts/

# REQUIRED: S3 bucket configuration for parameters/results
PARAMS_S3_BUCKET=your-params-bucket
PARAMS_S3_PREFIX=params/

# =============================================================================
# EMAIL CONFIGURATION (Optional for notifications)
# =============================================================================

# OPTIONAL: SparkPost API key for email sending
# If not set, email functionality will be disabled and warnings will be logged
SPARKPOST_API_KEY=your_sparkpost_api_key

# =============================================================================
# GOOGLE EARTH ENGINE CONFIGURATION (Required for GEE integration)
# =============================================================================

# REQUIRED: Google Cloud Project ID
GOOGLE_PROJECT_ID=your-gcp-project-id

# REQUIRED: Google Earth Engine API endpoint
GEE_ENDPOINT=https://earthengine-highvolume.googleapis.com

# REQUIRED: Google Earth Engine service account JSON (base64 encoded)
EE_SERVICE_ACCOUNT_JSON=your_base64_encoded_service_account_json

# =============================================================================
# RATE LIMITING CONFIGURATION
# =============================================================================

# OPTIONAL: Enable/disable rate limiting (true/false)
RATE_LIMITING_ENABLED=true

# OPTIONAL: Rate limit storage URI (uses REDIS_URL if not specified)
RATE_LIMIT_STORAGE_URI=redis://redis:6379/0

# OPTIONAL: Rate limit configurations (comma-separated limits)
DEFAULT_LIMITS=1000 per hour,100 per minute
API_LIMITS=100 per hour,20 per minute
AUTH_LIMITS=10 per minute,100 per hour
PASSWORD_RESET_LIMITS=10 per hour,3 per minute
USER_CREATION_LIMITS=100 per hour
EXECUTION_RUN_LIMITS=10 per minute,40 per hour

# OPTIONAL: Rate limiting testing configuration
BYPASS_RATE_LIMITING_IN_TESTS=false
RESET_RATE_LIMITS_BETWEEN_TESTS=true

# =============================================================================
# MONITORING AND ERROR REPORTING
# =============================================================================

# OPTIONAL: Rollbar tokens for error reporting
ROLLBAR_SERVER_TOKEN=your_rollbar_server_token
ROLLBAR_SCRIPT_TOKEN=your_rollbar_script_token

# =============================================================================
# LEGACY/COMPATIBILITY ENVIRONMENT VARIABLES
# =============================================================================

# OPTIONAL: Legacy environment variable (same as ENVIRONMENT)
ENV=dev

# OPTIONAL: Flask app entry point
FLASK_APP=main.py
