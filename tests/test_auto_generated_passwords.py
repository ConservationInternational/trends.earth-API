"""Tests for auto-generated password compliance with security policy."""

import re
import string

from gefapi.validators import validate_password


class TestAutoGeneratedPasswordCompliance:
    """Test that auto-generated passwords meet security requirements."""

    def test_generated_password_format(self):
        """Test that the password generation logic produces compliant passwords."""
        # Simulate the auto-generated password logic from user_service.py
        import secrets

        chars_upper = string.ascii_uppercase
        chars_lower = string.ascii_lowercase
        chars_digits = string.digits
        chars_special = "!@#$%^&*"

        # Ensure at least one of each required type
        password_chars = [
            secrets.choice(chars_upper),
            secrets.choice(chars_lower),
            secrets.choice(chars_digits),
            secrets.choice(chars_special),
        ]

        # Fill remaining characters randomly from all character sets
        all_chars = chars_upper + chars_lower + chars_digits + chars_special
        password_chars.extend(secrets.choice(all_chars) for _ in range(12))

        # Shuffle to avoid predictable pattern
        secrets.SystemRandom().shuffle(password_chars)
        generated_password = "".join(password_chars)

        # Test that generated password passes validation
        assert validate_password(generated_password) == generated_password

    def test_generated_password_meets_all_requirements(self):
        """Generate multiple passwords and verify all meet requirements."""
        import secrets

        chars_upper = string.ascii_uppercase
        chars_lower = string.ascii_lowercase
        chars_digits = string.digits
        chars_special = "!@#$%^&*"

        # Test 20 randomly generated passwords
        for _ in range(20):
            password_chars = [
                secrets.choice(chars_upper),
                secrets.choice(chars_lower),
                secrets.choice(chars_digits),
                secrets.choice(chars_special),
            ]

            all_chars = chars_upper + chars_lower + chars_digits + chars_special
            password_chars.extend(secrets.choice(all_chars) for _ in range(12))

            secrets.SystemRandom().shuffle(password_chars)
            generated_password = "".join(password_chars)

            # Verify length
            assert len(generated_password) == 16
            assert len(generated_password) >= 12
            assert len(generated_password) <= 128

            # Verify complexity requirements
            assert re.search(r"[A-Z]", generated_password), "Must contain uppercase"
            assert re.search(r"[a-z]", generated_password), "Must contain lowercase"
            assert re.search(r"\d", generated_password), "Must contain digit"
            special_chars = r"[!@#$%^&*(),.?\":{}|<>\-_+=\[\]\\/;'`~]"
            assert re.search(special_chars, generated_password), (
                "Must contain special character"
            )

            # Verify passes validation function
            assert validate_password(generated_password) == generated_password

    def test_generated_password_randomness(self):
        """Verify that generated passwords are actually random."""
        import secrets

        chars_upper = string.ascii_uppercase
        chars_lower = string.ascii_lowercase
        chars_digits = string.digits
        chars_special = "!@#$%^&*"

        # Generate 10 passwords and verify they're all different
        generated_passwords = set()
        for _ in range(10):
            password_chars = [
                secrets.choice(chars_upper),
                secrets.choice(chars_lower),
                secrets.choice(chars_digits),
                secrets.choice(chars_special),
            ]

            all_chars = chars_upper + chars_lower + chars_digits + chars_special
            password_chars.extend(secrets.choice(all_chars) for _ in range(12))

            secrets.SystemRandom().shuffle(password_chars)
            generated_password = "".join(password_chars)

            generated_passwords.add(generated_password)

        # All passwords should be unique (with extremely high probability)
        assert len(generated_passwords) == 10, "Generated passwords should be unique"
